#!/usr/bin/env ruby


system("echo Checking ...")
print "xcodeproj version: "
xcodeproj = system("xcodeproj --version")

if !xcodeproj
    system("echo Downloading ...")
    system("sudo gem install xcodeproj")
end

require 'xcodeproj'
require 'open-uri'
require 'fileutils'
require 'find'

module Xcodeproj
    class Project
        module Object
        class AbstractTarget < AbstractObject
            def add_system_library_tbd(names)
                Array(names).each do |name|
                    path = "usr/lib/lib#{name}.tbd"
                    files = project.frameworks_group.files
                    unless reference = files.find { |ref| ref.path == path }
                        reference = project.frameworks_group.new_file(path, :sdk_root)
                    end
                    frameworks_build_phase.add_file_reference(reference, true)
                    reference
                end
            end

        end
    end
end
end

## ########################### install_native ###########################

def install_native

    appkey = ARGV[0]

    src_dir = Dir.getwd
    src_dir[-32,src_dir.length] = ""
    Dir.chdir(src_dir)
    jpush_sdk_d = src_dir + "/jpush_sdk"


    ## download
    open('jpush_sdk.zip', 'wb') do |file|
        puts "Downloading JPush SDK ..."
        file << open('https://sdkfiledl.jiguang.cn/JPush-iOS-SDK-2.1.8.zip').read
        system("mkdir jpush_sdk")
        FileUtils.mv file,jpush_sdk_d
    end


    ## zip move delete
    system("unzip -o #{jpush_sdk_d+"/jpush_sdk"} -d #{jpush_sdk_d}")
    system("mv #{jpush_sdk_d+"/JPush-iOS-SDK-2.1.8/lib/jpush-ios-2.1.8.a"} #{jpush_sdk_d+"/"}")
    system("mv #{jpush_sdk_d+"/JPush-iOS-SDK-2.1.8/lib/JPUSHService.h"} #{jpush_sdk_d+"/"}")
    system("rm -rf #{jpush_sdk_d+"/__MACOSX"}")
    system("rm -rf #{jpush_sdk_d+"/JPush-iOS-SDK-2.1.8"}")
    system("rm -rf #{jpush_sdk_d+"/jpush_sdk.zip"}")

    ## xcode version

    xcode_version_path = "/Applications/Xcode.app/Contents/version.plist"

    xcode_version = 0

    if File.exists?(xcode_version_path)
        find = 0
        open(xcode_version_path,"r") do |file|
            file.each_line do |line|
                if find == 1
                    xcode_version = line.delete("<string>").delete("</string>")
                    puts "Xcode version:#{xcode_version}"
                    while(xcode_version.length > 4)
                        xcode_version = xcode_version.chop
                    end
                    break
                end
                if line.include?"CFBundleShortVersionString"
                    find = 1
                end
            end
        end
        else
        puts "Please install Xcode under the directory '/Applications/' "
        exit
    end

    ## add framework

    project = Xcodeproj::Project.open(src_dir+".xcodeproj")

    target = project.targets.first

    group = project.main_group.find_subpath(File.join('jpush_sdk'), true)

    group.set_source_tree('SOURCE_ROOT')

    file_ref1 = group.new_reference(jpush_sdk_d+"/jpush-ios-2.1.8.a")
    file_ref2 = group.new_reference(jpush_sdk_d+"/JPUSHService.h")

    target.frameworks_build_phase.add_file_reference(file_ref1, true)
    target.add_file_references([file_ref2])

    target.add_system_frameworks("CFNetwork")
    target.add_system_frameworks("CoreFoundation")
    target.add_system_frameworks("CoreTelephony")
    target.add_system_frameworks("CoreGraphics")
    target.add_system_frameworks("Foundation")
    target.add_system_frameworks("UIKit")
    target.add_system_frameworks("Security")
    target.add_system_frameworks("SystemConfiguration")
    if xcode_version.to_i >= 7
        target.add_system_library_tbd("z")
        else
        target.add_system_library("z")
    end
    target.add_system_frameworks("AdSupport")

    project.save

    ## add code

    appDelegate_path = ""

    def searchFor(name)
        Find.find(Dir.getwd) do |filename|
            if filename.include?name
                return filename
            end
        end
    end

    appDelegate_path = searchFor("AppDelegate.m")

    open(appDelegate_path+"m","w") do |test|
        open(appDelegate_path, 'r') do |file|
            file.each_line do |line|
                if line.start_with?('#import "AppDelegate.h"')
                    test.print line
                    test.print '#import "JPUSHService.h"'
                    test.print "\n"

                elsif line.start_with?("- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {")


                    test.puts "\
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken{ \n\
    // JPush sdk \n\
    [JPUSHService registerDeviceToken:deviceToken]; \n\
}"

                    test.puts "\n"
                    test.puts "\
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo { \n\
    // JPush sdk \n\
    [JPUSHService handleRemoteNotification:userInfo];   \n\
}"
                    test.print "\n"


                    test.puts "\
//IOS7 only  \n\
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {    \n\
    [JPUSHService handleRemoteNotification:userInfo];   \n\
    completionHandler(UIBackgroundFetchResultNewData);  \n\
}"
                    test.print "\n"


                    test.print line
                    test.print "    //JPush sdk"
                    test.print "\n"
                    test.print '    [JPUSHService setupWithOption:launchOptions appKey:@"'+appkey+'" channel:@"" apsForProduction:NO advertisingIdentifier:nil];'
                    test.puts "\n\n\n"


                    test.puts "\
#if __IPHONE_OS_VERSION_MAX_ALLOWED > __IPHONE_7_1 \n\
    if ([[UIDevice currentDevice].systemVersion floatValue] >= 8.0) { \n\
        //可以添加自定义categories \n\
        [JPUSHService registerForRemoteNotificationTypes:(UIUserNotificationTypeBadge | \n\
                                                          UIUserNotificationTypeSound | \n\
                                                          UIUserNotificationTypeAlert)  \n\
                                              categories:nil];  \n\
    } else {    \n\
        //categories 必须为nil \n\
        [JPUSHService registerForRemoteNotificationTypes:(UIRemoteNotificationTypeBadge |   \n\
                                                          UIRemoteNotificationTypeSound |   \n\
                                                          UIRemoteNotificationTypeAlert)    \n\
                                              categories:nil];  \n\
    }   \n\
#else   \n\
    //categories 必须为nil \n\
    [JPUSHService registerForRemoteNotificationTypes:(UIRemoteNotificationTypeBadge |   \n\
                                                      UIRemoteNotificationTypeSound |   \n\
                                                      UIRemoteNotificationTypeAlert)    \n\
                                          categories:nil];  \n\
#endif    \n"


                else
                    test.print line
                end
            end
        end
    end

    File.open(appDelegate_path,"w") do |test|
        File.open(appDelegate_path+"m",'r') do |file|
            file.each_line do | line|
                test.print line
            end
        end
    end

    system("rm -rf #{appDelegate_path+"m"}")

end


## ########################### install_cocos2dx ###########################

def install_cocos2dx

    src_dir = Dir.getwd + "/../../"
    jpush_sdk_d = src_dir + "jpush_sdk"
    appkey = ARGV[1]

    ## download
    open('jpush_sdk.zip', 'wb') do |file|
        puts "Downloading JPush SDK ..."
        file << open('https://www.jpush.cn/downloads/sdk/ios8/').read
        system("mkdir #{jpush_sdk_d+"/"}")
        FileUtils.mv file,jpush_sdk_d
    end

    open('JPushBridge.h','wb') do |file|
        puts "Downloading JPushBridge.h ..."
        file << open('https://raw.githubusercontent.com/jpush/jpush-cocos2d-x-plugin/master/iOS/JPushPlugin/JPushBridge.h').read
        FileUtils.mv file,jpush_sdk_d
    end

    open('JPushBridge.mm','wb') do |file|
        puts "Downloading JPushBridge.mm ..."
        file << open('https://raw.githubusercontent.com/jpush/jpush-cocos2d-x-plugin/master/iOS/JPushPlugin/JPushBridge.mm').read
        FileUtils.mv file,jpush_sdk_d
    end


    ## zip move delete
    system("unzip -o #{jpush_sdk_d+"/jpush_sdk"} -d #{jpush_sdk_d}")
    system("mv #{jpush_sdk_d+"/JPush-iOS-SDK-2.1.8/lib/jpush-ios-2.1.8.a"} #{jpush_sdk_d+"/"}")
    system("mv #{jpush_sdk_d+"/JPush-iOS-SDK-2.1.8/lib/JPUSHService.h"} #{jpush_sdk_d+"/"}")
    system("rm -rf #{jpush_sdk_d+"/__MACOSX"}")
    system("rm -rf #{jpush_sdk_d+"/JPush-iOS-SDK-2.1.8"}")
    system("rm -rf #{jpush_sdk_d+"/jpush_sdk.zip"}")

    ## xcode version

    xcode_version_path = "/Applications/Xcode.app/Contents/version.plist"

    xcode_version = 0

    if File.exists?(xcode_version_path)
        find = 0
        open(xcode_version_path,"r") do |file|
            file.each_line do |line|
                if find == 1
                    xcode_version = line.delete("<string>").delete("</string>")
                    puts "Xcode version:#{xcode_version}"
                    while(xcode_version.length > 4)
                        xcode_version = xcode_version.chop
                    end
                    break
                end
                if line.include?"CFBundleShortVersionString"
                    find = 1
                end
            end
        end
        else
        puts "Please install Xcode under the directory '/Applications/' "
        exit
    end

    ## add framework

    def searchForProjectDir(name)
        Find.find(Dir.getwd+"/../../") do |filename|
            if filename.include?name
                return filename
            end
        end
    end
    project_dir = searchForProjectDir(".xcodeproj")

    project = Xcodeproj::Project.open(project_dir)

    target = project.targets.first

    group = project.main_group.find_subpath(File.join('jpush_sdk'), true)

    group.set_source_tree('SOURCE_ROOT')

    file_ref1 = group.new_reference(jpush_sdk_d+"/jpush-ios-2.1.8.a")
    file_ref2 = group.new_reference(jpush_sdk_d+"/JPUSHService.h")
    file_ref3 = group.new_reference(jpush_sdk_d+"/JPushBridge.h")
    file_ref4 = group.new_reference(jpush_sdk_d+"/JPushBridge.mm")

    target.frameworks_build_phase.add_file_reference(file_ref1, true)
    target.add_file_references([file_ref2])
    target.add_file_references([file_ref3])
    target.add_file_references([file_ref4])

    target.add_system_frameworks("CFNetwork")
    target.add_system_frameworks("CoreFoundation")
    target.add_system_frameworks("CoreTelephony")
    target.add_system_frameworks("CoreGraphics")
    target.add_system_frameworks("Foundation")
    target.add_system_frameworks("UIKit")
    target.add_system_frameworks("Security")
    target.add_system_frameworks("SystemConfiguration")
    if xcode_version.to_i >= 7
        target.add_system_library_tbd("z")
        else
        target.add_system_library("z")
    end
    target.add_system_frameworks("AdSupport")

    project.save

    ## add code

    def searchFor(name)
        Find.find(Dir.getwd+"/../../") do |filename|
            puts filename
            if filename.include?name
                return filename
            end
        end
    end

    appDelegate_path = ""

    appDelegate_path = searchFor("AppController.mm")

    appDelegate_path_temp = appDelegate_path

    appDelegate_path_temp = appDelegate_path_temp.chop

    open(appDelegate_path_temp,"w") do |test|
        open(appDelegate_path, 'r') do |file|
            file.each_line do |line|
                if line.start_with?('#import "AppDelegate.h"')
                    test.print line
                    test.print '#import "JPUSHService.h"'
                    test.print "\n"
                    elsif line.start_with?("- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {")


                    test.puts "\
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken{ \n\
    // JPush sdk \n\
    [JPUSHService registerDeviceToken:deviceToken]; \n\
}"

                    test.puts "\n"
                    test.puts "\
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo { \n\
    // JPush sdk \n\
    [JPUSHService handleRemoteNotification:userInfo];   \n\
}"
                    test.print "\n"


                    test.puts "\
//IOS7 only  \n\
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {    \n\
    [JPUSHService handleRemoteNotification:userInfo];   \n\
    completionHandler(UIBackgroundFetchResultNewData);  \n\
}"
                    test.print "\n"

                    test.print line
                    
                    test.print "    //JPush sdk"
                    test.print "\n"
                    test.print '    [JPUSHService setupWithOption:launchOptions appKey:@"'+appkey+'" channel:@"" apsForProduction:NO advertisingIdentifier:nil];'
                    test.puts "\n\n\n"


                    test.puts "\
#if __IPHONE_OS_VERSION_MAX_ALLOWED > __IPHONE_7_1 \n\
    if ([[UIDevice currentDevice].systemVersion floatValue] >= 8.0) { \n\
        //可以添加自定义categories \n\
        [JPUSHService registerForRemoteNotificationTypes:(UIUserNotificationTypeBadge | \n\
                                                          UIUserNotificationTypeSound | \n\
                                                          UIUserNotificationTypeAlert)  \n\
                                              categories:nil];  \n\
    } else {    \n\
        //categories 必须为nil \n\
        [JPUSHService registerForRemoteNotificationTypes:(UIRemoteNotificationTypeBadge |   \n\
                                                          UIRemoteNotificationTypeSound |   \n\
                                                          UIRemoteNotificationTypeAlert)    \n\
                                              categories:nil];  \n\
    }   \n\
#else   \n\
    //categories 必须为nil \n\
    [JPUSHService registerForRemoteNotificationTypes:(UIRemoteNotificationTypeBadge |   \n\
                                                      UIRemoteNotificationTypeSound |   \n\
                                                      UIRemoteNotificationTypeAlert)    \n\
                                          categories:nil];  \n\
#endif    \n"

                    else
                    test.print line
                end
            end
        end
    end

    File.open(appDelegate_path,"w") do |test|
        File.open(appDelegate_path_temp,'r') do |file|
            file.each_line do | line|
                test.print line
            end
        end
    end

    system("rm -rf #{appDelegate_path_temp}")

end

## ########################### install_cordova ###########################

def install_cordova
    appkey = ARGV[0]
    system("cordova platform add ios")
    system("cordova plugin add cordova-plugin-device")
    system("cordova plugin add https://github.com/jpush/jpush-phonegap-plugin.git --variable API_KEY=#{appkey}")
end

## ########################### def end ###########################

appkey = ARGV[0]
puts "-----"+"appkey:"+appkey+"-----"

platform = ARGV[1]
if !platform
    platform = "native"
end
puts "-----"+"platform:"+platform+"-----"

if platform == "native"
    install_native()
elsif platform == "cocos2dx"
    install_cocos2dx()
elsif platform == "cordova"
    install_cordova()
elsif
    install_native()
end

puts "-----------------------------------------------------------"
puts "JPush SDK installed successfully, have fun!"
puts "appkey: #{appkey}"
puts "platform: #{platform}"
puts "-----------------------------------------------------------"
puts ""

exit
